---
const title = 'Dropdown Menus X';

interface Props {
 id: string   //a unique identifier for this component, allowing multiple dropdowns on a page without collisions
 caption: string   //the text displayed in the button that triggers the dropdown
 dropdownStyles: string   //any additional styles to apply to the overall wrapper <div>
 buttonStyles: string   //any additional Tailwind classes for customizing the trigger button
 listStyles: string   //any additional styles to apply to the dropdown list
 moveOver: string //comma separated integer values specifying x,y shift in dropdown position
 triggers: string, //events for which the dropdown will be triggered
 duration: string, //transition duration for the dropdown appearance/disappearance
}

import {twMerge} from 'tailwind-merge'
const {
	id, 
	caption, 
	dropdownStyles, 
	buttonStyles, 
	listStyles, 
	moveOver = "0,0", 
	triggers = 'click, mouseEnter', 
	duration = '100js'
} = Astro.props

const tw = {
	triggerButton: 'inline-block rounded-lg p-3 ' +
		'font-semibold text-lg lg:text-xl text-zinc-100 hover:text-zinc-400 hover:dark:text-zinc-300 ' + 
		'bg-indigo-600 hover:bg-indigo-800 ' +
		'focus:ring-4 focus:outline-none focus:ring-indigo-300',
	dropdownWrapper:'hidden h-0 absolute z-10 ' + 
		'rounded-lg drop-shadow-2xl overflow-hidden ' + 
		'text-lg font-medium ' +
		'bg-white dark:bg-gray-800 ',
	itemsList:'opacity-0 flex flex-col gap-y-4 cursor-pointer ' + 
		'py-4 font-semibold text-gray-900 dark:text-zinc-50',
}
---

<script type="text/hyperscript">
  -- namespaced behavior for showing a dropdown from a trigger button
  behavior ToggleDropdown
		init
			set :dropdownWrapper to my @id + '-wrapper'
			set :itemsList to my @id + '-items'
			set :dropdownHasMouse to false
		end

	
	on mouseenter
	  call me.focus()
		trigger openDropdown on me
	end

	on mouseleave
	  call me.blur()
		if event.target.id is my @id then wait 50ms then
			if not :dropdownHasMouse trigger closeDropdown on me
    end
	end

	on click from me
     if I match .open then trigger closeDropdown on me 
		 otherwise trigger openDropdown on me
	end

	on mouseWithinDropdown(value)
   set :dropdownHasMouse to value
	end 

	-- handler for dismissal of dropdown using Escape key when element has the focus
	on keydown[key=='Escape']
		trigger closeDropdown on me
	end

		-- function to calculate actual height of dropdown based on it's contents
	def calcHeight
		set dropdownHeight to 0 then set items to the children of #{:dropdownWrapper}
		for item in items increment the dropdownHeight by the item's offsetHeight end
		return dropdownHeight
	end -- calcHeight

	-- handler to reposition dropdown by x,y pixels
	def resetPosition
		set offset to my @moveOver.split(',')
		set leftOffset to offset[0] as Int
		set bottomOffset to offset[1] as Int
		measure me then put the result.bounds into myBounds
		set *left of #{:dropdownWrapper} to (myBounds.left + leftOffset) px
		set *top of #{:dropdownWrapper} to (myBounds.bottom  + bottomOffset) px
	end  -- calcOffset
	
	on openDropdown
		resetPosition()
		remove .hidden from #{:dropdownWrapper} -- now items have an offsetHeight available
		set *height of #{:dropdownWrapper} to (calcHeight() + 'px') then wait 20ms then
		set *opacity of #{:itemsList} to 1
		add .open to me
	end

	-- handler to hide dropdown
	on closeDropdown
		set *opacity of #{:itemsList} to 0
		set *height of #{:dropdownWrapper} to 0 then settle then
		add .hidden to #{:dropdownWrapper}
		remove .open from me
	end

	end -- ToggleDropdown behavior

	behavior HideDropdown
	  on mouseover send mouseWithinDropdown(value:true) to the previous <button/> end
		on mouseleave send mouseWithinDropdown(value:false) to the previous <button/> end
		on click or mouseleave send closeDropdown to the previous <button/> end
	end -- HideDropdown
</script>


<div style="margin-top:0;">
	<button
		id={id}
		type='button'
		moveOver={moveOver}
		class={twMerge(tw.triggerButton, buttonStyles)}
		_="install ToggleDropdown">
		<slot name='startIcon' />
		{caption}
		<slot name='endIcon'/>
	</button>
	
	
	
	<div id=`${id}-wrapper`
		class={twMerge(tw.dropdownWrapper, dropdownStyles)}
		style=`transition: all ${duration} ease-in-out`>
			<ul id=`${id}-items`
				class={twMerge(tw.itemsList, listStyles)}
				style="transition: all 50ms ease-in-out"
			_="install HideDropdown">
			<slot/>
			</ul>
	</div>
</div>



---
const title = 'Dropdown Menu B';
import {twMerge} from 'tailwind-merge'

interface Props {
 id: string   //a unique identifier for this component, allowing multiple dropdowns on a page without collisions
 caption: string   //the text displayed in the trigger button
 buttonStyles?: string   //any additional Tailwind classes for customizing the trigger button
 dropdownStyles?: string   //any additional styles to apply to the dropdown container <div>
 listStyles?: string   //any additional styles to apply to the <ul>
 moveXY?: string //comma separated integer values specifying x,y shift in dropdown position
 duration?: string, //duration (in milliseconds) for dropdown height transition
}

const {
	id, 
	caption, 
	dropdownStyles, 
	buttonStyles, 
	listStyles, 
	moveXY = "0,0", 
	duration = '100ms'
} = Astro.props

const tw = {
	triggerButton: 'inline-block rounded-lg p-3 ' +
		'font-semibold text-lg lg:text-xl text-zinc-100 hover:text-zinc-400 hover:dark:text-zinc-300 ' + 
		'bg-indigo-600 hover:bg-indigo-800 ' +
		'focus:ring-4 focus:outline-none focus:ring-indigo-300',
	dropdownContainer:'h-0 absolute z-10 ' + 
		'rounded-lg drop-shadow-2xl overflow-hidden ' + 
		'text-lg font-medium ' +
		'bg-white dark:bg-gray-800 ',
	itemsList:'opacity-0 flex flex-col gap-y-4 cursor-pointer ' + 
		'py-4 font-semibold text-gray-900 dark:text-zinc-50',
}
---

<script type="text/hyperscript">

  behavior ToggleDropdown
		init
			set :dropdownContainer to my @id + '-container'
			set :itemsList to my @id + '-items'
			set :dropdownHasMouse to false
		end -- init
	
		on mouseenter from me
			call me.focus()
			trigger openDropdown on me
		end

		on mouseleave from me
			call me.blur()
			wait 50ms then
				if not :dropdownHasMouse trigger closeDropdown on me
			end
		end

		on click from me
		 if I match .open then trigger closeDropdown on me 
			otherwise trigger openDropdown on me
		end

		on mouseWithinDropdown(value)
			set :dropdownHasMouse to value
		end 

		on keydown[key=='Escape']
			trigger closeDropdown on me
		end  -- Escape key handler

		def calcHeight
			set dropdownHeight to 0 then set items to the children of #{:dropdownContainer}
			for item in items increment the dropdownHeight by the item's offsetHeight end
			return dropdownHeight
		end -- calculate dropdown container's height based on content

		def resetPosition
			set offset to my @moveXY.split(',')
			set leftOffset to offset[0] as Int
			set bottomOffset to offset[1] as Int
			measure me then put the result.bounds into myBounds
			set *left of #{:dropdownContainer} to (myBounds.left + leftOffset + window.pageXOffset) px
			set *top of #{:dropdownContainer} to (myBounds.bottom  + bottomOffset + window.pageYOffset) px
		end  -- handler to reposition dropdown by x,y pixels
		
		on openDropdown from me
			resetPosition()
			set *height of #{:dropdownContainer} to (calcHeight() + 'px') then wait 20ms then
			set *opacity of #{:itemsList} to 1
			add .open to me
		end  -- handler to open dropdown

		on closeDropdown 
			set *opacity of #{:itemsList} to 0
			set *height of #{:dropdownContainer} to 0 then settle then
			remove .open from me
		end -- handler to close dropdown

		end -- behavior ToggleDropdown

	behavior HideDropdown
	  on mouseenter send mouseWithinDropdown(value:true) to the previous <button/> end
		on mouseleave send mouseWithinDropdown(value:false) to the previous <button/> end
		on click or mouseleave send closeDropdown to the previous <button/> end
	end -- behavior HideDropdown

</script>


<div class="not-content">
	<!-- Trigger -->
	<button
		id={id}
		type='button'
		moveXY={moveXY}
		class={twMerge(tw.triggerButton, buttonStyles)}
		script="install ToggleDropdown">
		<slot name='leftIcon' />
		{caption}
		<slot name='rightIcon'/>
	</button>
	<!-- Dropdown -->
	<div id=`${id}-container`
		class={twMerge(tw.dropdownContainer, dropdownStyles)}
		style=`transition: all ${duration} ease-in-out`>
			<ul id=`${id}-items`
				class={twMerge(tw.itemsList, listStyles)}
				style="transition: all 50ms ease-in-out"
			script="install HideDropdown">
			<slot/>
			</ul>
	</div>
</div>



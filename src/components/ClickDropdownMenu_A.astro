---
const title = 'Click Dropdown Menu (A)';
import {twMerge} from 'tailwind-merge'

interface Props {
 id: string   //a unique identifier for this component, allowing multiple dropdowns on a page without collisions
 caption: string   //the text displayed in the trigger button
 buttonStyles?: string   //any additional Tailwind classes for customizing the trigger button
 dropdownStyles?: string   //any additional styles to apply to the dropdown container <div>
 listStyles?: string   //any additional styles to apply to the <ul>
 moveXY?: string //comma separated integer values specifying x,y shift in dropdown position
 duration?: string, //duration (in milliseconds) for dropdown height transition
}

const {
	id, 
	caption, 
	buttonStyles, 
	dropdownStyles, 
	listStyles, 
	moveXY = "0,0", 
	duration = '100ms'
} = Astro.props

const tw = {
	triggerButton: 'inline-block rounded-lg p-3 ' +
		'font-semibold text-lg lg:text-xl text-zinc-100 hover:text-zinc-400 hover:dark:text-zinc-300 ' + 
		'bg-indigo-600 hover:bg-indigo-800 ' +
		'focus:ring-4 focus:outline-none focus:ring-indigo-300',
	dropdownContainer:'h-0 absolute z-10 ' + 
		'rounded-lg drop-shadow-2xl overflow-hidden ' + 
		'text-lg font-medium ' +
		'bg-white dark:bg-gray-800 ',
	itemsList:'opacity-0 flex flex-col gap-y-4 cursor-pointer ' + 
		'py-4 font-semibold text-gray-900 dark:text-zinc-50',
}

const hs = {
	toggleDropdown: `
		init
			set :dropdownContainer to my @id + '-container'
			set :itemsList to my @id + '-list'
		end -- init 

		on click from me
			if I match .open then trigger closeDropdown on me 
			otherwise trigger openDropdown on me
		end -- click toggles open/closed

		on keydown[key=='Escape'] or blur
			trigger closeDropdown on me 
		end  -- close on blur or Escape key when focused

		def calculatedHeight
			set dropdownHeight to 0 then set items to the children of the #{:dropdownContainer}
			for item in items increment the dropdownHeight by the item's offsetHeight end
			return dropdownHeight
		end -- function to calculate dropdown container's height based on it's content
			
		def repositionDropdown
			set offsets to my @moveXY.split(',')
			set xOffset to the offsets[0] as Int
			set yOffset to the offsets[1] as Int
			measure me then put the result.bounds into buttonLocation
			set the *left of the #{:dropdownContainer} to (buttonLocation.left + xOffset + window.pageXOffset) px
			set the *top of the #{:dropdownContainer} to (buttonLocation.bottom  + yOffset + window.pageYOffset) px
		end  -- function to move dropdown by x,y pixels
		
		on openDropdown from me
			repositionDropdown()
			set the *height of the #{:dropdownContainer} to the calculatedHeight() px then wait 20ms then
			set the *opacity of the #{:itemsList} to 1
			add .open to me
		end -- handler to open dropdown

		on closeDropdown
			set the *opacity of the #{:itemsList} to 0
			set the *height of the #{:dropdownContainer} to 0 then settle then
			remove .open from me
		end -- handler to close dropdown `,
  hideDropdown: `on click or mouseleave send closeDropdown to the previous <button/> end`
}
---
<div class="not-content">
		<!-- Trigger -->
		<button 
		id={id}  
		type='button'
		moveXY={moveXY} 
		class={twMerge(tw.triggerButton, buttonStyles)} 
		script={hs.toggleDropdown}>
			<slot name='leftIcon'/>
			{caption}
			<slot name='rightIcon'/>
	</button>
	<!-- Dropdown -->
	<div id=`${id}-container` 
		class={twMerge(tw.dropdownContainer, dropdownStyles)} 
		style=`transition: all ${duration} ease-in-out`>
			<ul id=`${id}-list` 
				class={twMerge(tw.itemsList, listStyles)} 
				style="transition: all 50ms ease-in-out"
				script={hs.hideDropdown}>
			<slot/>
			</ul>
	</div>
	
</div>


